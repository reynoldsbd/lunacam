//! Error handling used throughout LunaCam

use std::env::VarError;
use std::io;

use actix_web::HttpResponse;
use actix_web::error::ResponseError;
use actix_web::http::StatusCode;
use diesel::result::Error as DieselError;
use diesel_migrations::RunMigrationsError;
use serde::Serialize;
use tokio::executor::SpawnError;


/// Error type generated by LunaCam
#[derive(Debug, Display, From)]
pub enum Error {

    /// Error generated by database query
    Database(DieselError),

    /// Failure establishing connection to database
    DatabaseConnection(diesel::result::ConnectionError),

    /// Error hashing or verifying a password
    Hashing(argonautica::Error),

    /// General I/O error
    Io(io::Error),

    /// Failure serializing or deserializing JSON
    Json(serde_json::Error),

    /// Error running database migrations
    Migration(RunMigrationsError),

    /// Error generated by database connection pool
    Pool(diesel::r2d2::PoolError),

    /// Error when making a web request
    Request(reqwest::Error),

    /// Failed to spawn a task
    Spawn(SpawnError),

    /// Error generated by Tera
    Tera(tera::Error),

    /// Error reading an environment variable
    Var(VarError),

    /// Error produced by a failed web request
    #[display(fmt = "{}", _1)]
    Web(StatusCode, &'static str),
}

impl ResponseError for Error {

    fn error_response(&self) -> HttpResponse {

        #[derive(Serialize)]
        struct ErrorBody<'a> {
            message: &'a str
        }

        let status = match self {
            Self::Web(status, _) => *status,
            Self::Database(DieselError::NotFound) => StatusCode::NOT_FOUND,
            _ => StatusCode::INTERNAL_SERVER_ERROR,
        };

        let body = ErrorBody {
            message: &format!("{}", self),
        };

        HttpResponse::build(status)
            .json(body)
    }

    fn render_response(&self) -> HttpResponse {
        self.error_response()
    }
}


/// Result type generated by LunaCam
pub type Result<T> = std::result::Result<T, Error>;
